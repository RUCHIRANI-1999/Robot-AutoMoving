
205088R.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000654  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000006c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ae  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064a  00000000  00000000  0000103a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000403  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000370  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f8  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  74:	0c 94 28 03 	jmp	0x650	; 0x650 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
		goAhead();
	}
}


ISR(INT0_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	bf 93       	push	r27
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
	// This function will get executed whenever the micro controller is interrupted by INT0.
	if(i== 0)//to get executed when interrupted by a rising edge(for the first time, since i = 0)
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a6:	89 2b       	or	r24, r25
  a8:	51 f4       	brne	.+20     	; 0xbe <__vector_1+0x42>
	{
		TCCR1B |=(1<<CS10);//to start counting(No p rescaling). See page number 110
  aa:	8e b5       	in	r24, 0x2e	; 46
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	8e bd       	out	0x2e, r24	; 46
		i=1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	2f c0       	rjmp	.+94     	; 0x11c <__vector_1+0xa0>
	}
	else//to get executed when interrupted by the falling edge(for the second time, since we set i = 1 previously)
	{
		TCCR1B = 0;//to stop counting
  be:	1e bc       	out	0x2e, r1	; 46
		tCount = TCNT1;//to take the value of counter to our variable
  c0:	8c b5       	in	r24, 0x2c	; 44
  c2:	9d b5       	in	r25, 0x2d	; 45
  c4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <tCount+0x1>
  c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <tCount>
		distance = tCount *1000000.0/F_CPU/58;
  cc:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <tCount>
  d0:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <tCount+0x1>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 09 02 	call	0x412	; 0x412 <__floatunsisf>
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	34 e2       	ldi	r19, 0x24	; 36
  e0:	44 e7       	ldi	r20, 0x74	; 116
  e2:	59 e4       	ldi	r21, 0x49	; 73
  e4:	0e 94 bb 02 	call	0x576	; 0x576 <__mulsf3>
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	34 e2       	ldi	r19, 0x24	; 36
  ec:	44 ef       	ldi	r20, 0xF4	; 244
  ee:	5a e4       	ldi	r21, 0x4A	; 74
  f0:	0e 94 97 01 	call	0x32e	; 0x32e <__divsf3>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	48 e6       	ldi	r20, 0x68	; 104
  fa:	52 e4       	ldi	r21, 0x42	; 66
  fc:	0e 94 97 01 	call	0x32e	; 0x32e <__divsf3>
 100:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <distance>
 104:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <distance+0x1>
 108:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <distance+0x2>
 10c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <distance+0x3>
		TCNT1 = 0;//to reset counter to 0
 110:	1d bc       	out	0x2d, r1	; 45
 112:	1c bc       	out	0x2c, r1	; 44
		i=0; 
 114:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 118:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_9>:

ISR(TIMER1_OVF_vect)
{// This function will get executed if Timer/counter 1 get overflowed
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	TCCR1B = 0;//to stop counting
 160:	1e bc       	out	0x2e, r1	; 46
	tCount = 65535;//to make the variable ~0 when there is a counter overflow
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <tCount+0x1>
 16a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <tCount>
	distance = tCount *1000000.0/F_CPU/58;
 16e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <tCount>
 172:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <tCount+0x1>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 09 02 	call	0x412	; 0x412 <__floatunsisf>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	34 e2       	ldi	r19, 0x24	; 36
 182:	44 e7       	ldi	r20, 0x74	; 116
 184:	59 e4       	ldi	r21, 0x49	; 73
 186:	0e 94 bb 02 	call	0x576	; 0x576 <__mulsf3>
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	34 e2       	ldi	r19, 0x24	; 36
 18e:	44 ef       	ldi	r20, 0xF4	; 244
 190:	5a e4       	ldi	r21, 0x4A	; 74
 192:	0e 94 97 01 	call	0x32e	; 0x32e <__divsf3>
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	48 e6       	ldi	r20, 0x68	; 104
 19c:	52 e4       	ldi	r21, 0x42	; 66
 19e:	0e 94 97 01 	call	0x32e	; 0x32e <__divsf3>
 1a2:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <distance>
 1a6:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <distance+0x1>
 1aa:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <distance+0x2>
 1ae:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <distance+0x3>
	
	TCNT1 = 0;//to reset counter to 0
 1b2:	1d bc       	out	0x2d, r1	; 45
 1b4:	1c bc       	out	0x2c, r1	; 44
	i = 0;
 1b6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ba:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <trig>:

void trig()
{
	//Send a 15us pulse to the trigger pin
	PORTA = PORTA |(1<<PA1);
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	88 e2       	ldi	r24, 0x28	; 40
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <trig+0x8>
	_delay_us(15);
	PORTA = PORTA &= ~(1<<PA1);
 1ec:	8b b3       	in	r24, 0x1b	; 27
 1ee:	8d 7f       	andi	r24, 0xFD	; 253
 1f0:	8b bb       	out	0x1b, r24	; 27
 1f2:	8b bb       	out	0x1b, r24	; 27
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <trig+0x16>
 1fa:	08 95       	ret

000001fc <goAhead>:


void goAhead(){

	//Left Motor
	PORTC = PORTC | (1 << DDC3);
 1fc:	85 b3       	in	r24, 0x15	; 21
 1fe:	88 60       	ori	r24, 0x08	; 8
 200:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC & ~(1 << DDC4);
 202:	85 b3       	in	r24, 0x15	; 21
 204:	8f 7e       	andi	r24, 0xEF	; 239
 206:	85 bb       	out	0x15, r24	; 21
	
	//Right Motor
	PORTC = PORTC | (1 << DDC5);
 208:	85 b3       	in	r24, 0x15	; 21
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC & ~(1 << DDC6);
 20e:	85 b3       	in	r24, 0x15	; 21
 210:	8f 7b       	andi	r24, 0xBF	; 191
 212:	85 bb       	out	0x15, r24	; 21
 214:	08 95       	ret

00000216 <goLeft>:
}


void goLeft(){
	//Left Motor
	PORTC = PORTC & ~(1 << DDC3); //stop
 216:	85 b3       	in	r24, 0x15	; 21
 218:	87 7f       	andi	r24, 0xF7	; 247
 21a:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC & ~(1 << DDC4);
 21c:	85 b3       	in	r24, 0x15	; 21
 21e:	8f 7e       	andi	r24, 0xEF	; 239
 220:	85 bb       	out	0x15, r24	; 21

	//Right Motor
	PORTC = PORTC | (1 << DDC5); //rotate
 222:	85 b3       	in	r24, 0x15	; 21
 224:	80 62       	ori	r24, 0x20	; 32
 226:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC & ~(1 << DDC6);
 228:	85 b3       	in	r24, 0x15	; 21
 22a:	8f 7b       	andi	r24, 0xBF	; 191
 22c:	85 bb       	out	0x15, r24	; 21
 22e:	08 95       	ret

00000230 <stopRobot>:
}


void stopRobot(){
	//Left Motor
	PORTC = PORTC & ~(1 << DDC3); // stop
 230:	85 b3       	in	r24, 0x15	; 21
 232:	87 7f       	andi	r24, 0xF7	; 247
 234:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC & ~(1 << DDC4);
 236:	85 b3       	in	r24, 0x15	; 21
 238:	8f 7e       	andi	r24, 0xEF	; 239
 23a:	85 bb       	out	0x15, r24	; 21
	//Right Motor
	PORTC = PORTC & ~(1 << DDC5); // stop
 23c:	85 b3       	in	r24, 0x15	; 21
 23e:	8f 7d       	andi	r24, 0xDF	; 223
 240:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC & ~(1 << DDC6);
 242:	85 b3       	in	r24, 0x15	; 21
 244:	8f 7b       	andi	r24, 0xBF	; 191
 246:	85 bb       	out	0x15, r24	; 21
 248:	08 95       	ret

0000024a <isBlocked>:
	}
}

void isBlocked(){
	//to control the motors
	trig();
 24a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <trig>
	if (distance < 5)
 24e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <distance>
 252:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <distance+0x1>
 256:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <distance+0x2>
 25a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <distance+0x3>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	40 ea       	ldi	r20, 0xA0	; 160
 264:	50 e4       	ldi	r21, 0x40	; 64
 266:	0e 94 92 01 	call	0x324	; 0x324 <__cmpsf2>
 26a:	88 23       	and	r24, r24
 26c:	dc f4       	brge	.+54     	; 0x2a4 <isBlocked+0x5a>
	{
		stopRobot();
 26e:	0e 94 18 01 	call	0x230	; 0x230 <stopRobot>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	83 ed       	ldi	r24, 0xD3	; 211
 276:	90 e3       	ldi	r25, 0x30	; 48
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <isBlocked+0x2e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <isBlocked+0x38>
 282:	00 00       	nop
		_delay_ms(2000);
		goLeft();
 284:	0e 94 0b 01 	call	0x216	; 0x216 <goLeft>
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	83 ed       	ldi	r24, 0xD3	; 211
 28c:	90 e3       	ldi	r25, 0x30	; 48
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <isBlocked+0x44>
 296:	00 c0       	rjmp	.+0      	; 0x298 <isBlocked+0x4e>
 298:	00 00       	nop
		_delay_ms(2000);
		stopRobot();
 29a:	0e 94 18 01 	call	0x230	; 0x230 <stopRobot>
		isBlocked(); // recursively call function 
 29e:	0e 94 25 01 	call	0x24a	; 0x24a <isBlocked>
 2a2:	08 95       	ret
	}else{
		goAhead();
 2a4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <goAhead>
 2a8:	08 95       	ret

000002aa <main>:
void isBlocked();

int main(void)
{
	
	DDRC = DDRC |(1 << DDC3); // Set pin as an output
 2aa:	84 b3       	in	r24, 0x14	; 20
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	84 bb       	out	0x14, r24	; 20
	DDRC = DDRC |(1 << DDC4);
 2b0:	84 b3       	in	r24, 0x14	; 20
 2b2:	80 61       	ori	r24, 0x10	; 16
 2b4:	84 bb       	out	0x14, r24	; 20
	DDRC = DDRC |(1 << DDC5);
 2b6:	84 b3       	in	r24, 0x14	; 20
 2b8:	80 62       	ori	r24, 0x20	; 32
 2ba:	84 bb       	out	0x14, r24	; 20
	DDRC = DDRC |(1 << DDC6);
 2bc:	84 b3       	in	r24, 0x14	; 20
 2be:	80 64       	ori	r24, 0x40	; 64
 2c0:	84 bb       	out	0x14, r24	; 20
	DDRA = DDRA |(1 << DDA1); // to set Trigger pin as an output
 2c2:	8a b3       	in	r24, 0x1a	; 26
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	8a bb       	out	0x1a, r24	; 26
	DDRD = DDRD & ~(1 << DDD2) ; // to set Echo pin(INT0 - PD2 on atmega32) as an input.
 2c8:	81 b3       	in	r24, 0x11	; 17
 2ca:	8b 7f       	andi	r24, 0xFB	; 251
 2cc:	81 bb       	out	0x11, r24	; 17
	PORTD = PORTD & ~(1 << PD2) ; 
 2ce:	82 b3       	in	r24, 0x12	; 18
 2d0:	8b 7f       	andi	r24, 0xFB	; 251
 2d2:	82 bb       	out	0x12, r24	; 18
 2d4:	2f e7       	ldi	r18, 0x7F	; 127
 2d6:	88 e3       	ldi	r24, 0x38	; 56
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x30>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x3a>
 2e4:	00 00       	nop
	_delay_ms(50);
	
	GICR |= (1<<INT0); //to enable interrupt for INT0
 2e6:	8b b7       	in	r24, 0x3b	; 59
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC00);//to make any logical change on INT0 generate an interrupt
 2ec:	85 b7       	in	r24, 0x35	; 53
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	85 bf       	out	0x35, r24	; 53
	TIMSK |= (1 << TOIE1);//to enable Timer/Counter 1, Overflow interrupt
 2f2:	89 b7       	in	r24, 0x39	; 57
 2f4:	84 60       	ori	r24, 0x04	; 4
 2f6:	89 bf       	out	0x39, r24	; 57
	
	sei();//to enable global interrupt bit
 2f8:	78 94       	sei
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	84 e3       	ldi	r24, 0x34	; 52
 2fe:	9c e0       	ldi	r25, 0x0C	; 12
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x56>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x60>
 30a:	00 00       	nop
	_delay_ms(500);
	
	while(1)
	{
		
		isBlocked(); //to call isBlocked function
 30c:	0e 94 25 01 	call	0x24a	; 0x24a <isBlocked>
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	81 ee       	ldi	r24, 0xE1	; 225
 314:	94 e0       	ldi	r25, 0x04	; 4
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <main+0x6c>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x76>
 320:	00 00       	nop
 322:	f4 cf       	rjmp	.-24     	; 0x30c <main+0x62>

00000324 <__cmpsf2>:
 324:	0e 94 46 02 	call	0x48c	; 0x48c <__fp_cmp>
 328:	08 f4       	brcc	.+2      	; 0x32c <__cmpsf2+0x8>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	08 95       	ret

0000032e <__divsf3>:
 32e:	0e 94 ab 01 	call	0x356	; 0x356 <__divsf3x>
 332:	0c 94 81 02 	jmp	0x502	; 0x502 <__fp_round>
 336:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fp_pscB>
 33a:	58 f0       	brcs	.+22     	; 0x352 <__divsf3+0x24>
 33c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fp_pscA>
 340:	40 f0       	brcs	.+16     	; 0x352 <__divsf3+0x24>
 342:	29 f4       	brne	.+10     	; 0x34e <__divsf3+0x20>
 344:	5f 3f       	cpi	r21, 0xFF	; 255
 346:	29 f0       	breq	.+10     	; 0x352 <__divsf3+0x24>
 348:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_inf>
 34c:	51 11       	cpse	r21, r1
 34e:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_szero>
 352:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_nan>

00000356 <__divsf3x>:
 356:	0e 94 92 02 	call	0x524	; 0x524 <__fp_split3>
 35a:	68 f3       	brcs	.-38     	; 0x336 <__divsf3+0x8>

0000035c <__divsf3_pse>:
 35c:	99 23       	and	r25, r25
 35e:	b1 f3       	breq	.-20     	; 0x34c <__divsf3+0x1e>
 360:	55 23       	and	r21, r21
 362:	91 f3       	breq	.-28     	; 0x348 <__divsf3+0x1a>
 364:	95 1b       	sub	r25, r21
 366:	55 0b       	sbc	r21, r21
 368:	bb 27       	eor	r27, r27
 36a:	aa 27       	eor	r26, r26
 36c:	62 17       	cp	r22, r18
 36e:	73 07       	cpc	r23, r19
 370:	84 07       	cpc	r24, r20
 372:	38 f0       	brcs	.+14     	; 0x382 <__divsf3_pse+0x26>
 374:	9f 5f       	subi	r25, 0xFF	; 255
 376:	5f 4f       	sbci	r21, 0xFF	; 255
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	44 1f       	adc	r20, r20
 37e:	aa 1f       	adc	r26, r26
 380:	a9 f3       	breq	.-22     	; 0x36c <__divsf3_pse+0x10>
 382:	35 d0       	rcall	.+106    	; 0x3ee <__divsf3_pse+0x92>
 384:	0e 2e       	mov	r0, r30
 386:	3a f0       	brmi	.+14     	; 0x396 <__divsf3_pse+0x3a>
 388:	e0 e8       	ldi	r30, 0x80	; 128
 38a:	32 d0       	rcall	.+100    	; 0x3f0 <__divsf3_pse+0x94>
 38c:	91 50       	subi	r25, 0x01	; 1
 38e:	50 40       	sbci	r21, 0x00	; 0
 390:	e6 95       	lsr	r30
 392:	00 1c       	adc	r0, r0
 394:	ca f7       	brpl	.-14     	; 0x388 <__divsf3_pse+0x2c>
 396:	2b d0       	rcall	.+86     	; 0x3ee <__divsf3_pse+0x92>
 398:	fe 2f       	mov	r31, r30
 39a:	29 d0       	rcall	.+82     	; 0x3ee <__divsf3_pse+0x92>
 39c:	66 0f       	add	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	88 1f       	adc	r24, r24
 3a2:	bb 1f       	adc	r27, r27
 3a4:	26 17       	cp	r18, r22
 3a6:	37 07       	cpc	r19, r23
 3a8:	48 07       	cpc	r20, r24
 3aa:	ab 07       	cpc	r26, r27
 3ac:	b0 e8       	ldi	r27, 0x80	; 128
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <__divsf3_pse+0x56>
 3b0:	bb 0b       	sbc	r27, r27
 3b2:	80 2d       	mov	r24, r0
 3b4:	bf 01       	movw	r22, r30
 3b6:	ff 27       	eor	r31, r31
 3b8:	93 58       	subi	r25, 0x83	; 131
 3ba:	5f 4f       	sbci	r21, 0xFF	; 255
 3bc:	3a f0       	brmi	.+14     	; 0x3cc <__divsf3_pse+0x70>
 3be:	9e 3f       	cpi	r25, 0xFE	; 254
 3c0:	51 05       	cpc	r21, r1
 3c2:	78 f0       	brcs	.+30     	; 0x3e2 <__divsf3_pse+0x86>
 3c4:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_inf>
 3c8:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_szero>
 3cc:	5f 3f       	cpi	r21, 0xFF	; 255
 3ce:	e4 f3       	brlt	.-8      	; 0x3c8 <__divsf3_pse+0x6c>
 3d0:	98 3e       	cpi	r25, 0xE8	; 232
 3d2:	d4 f3       	brlt	.-12     	; 0x3c8 <__divsf3_pse+0x6c>
 3d4:	86 95       	lsr	r24
 3d6:	77 95       	ror	r23
 3d8:	67 95       	ror	r22
 3da:	b7 95       	ror	r27
 3dc:	f7 95       	ror	r31
 3de:	9f 5f       	subi	r25, 0xFF	; 255
 3e0:	c9 f7       	brne	.-14     	; 0x3d4 <__divsf3_pse+0x78>
 3e2:	88 0f       	add	r24, r24
 3e4:	91 1d       	adc	r25, r1
 3e6:	96 95       	lsr	r25
 3e8:	87 95       	ror	r24
 3ea:	97 f9       	bld	r25, 7
 3ec:	08 95       	ret
 3ee:	e1 e0       	ldi	r30, 0x01	; 1
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	88 1f       	adc	r24, r24
 3f6:	bb 1f       	adc	r27, r27
 3f8:	62 17       	cp	r22, r18
 3fa:	73 07       	cpc	r23, r19
 3fc:	84 07       	cpc	r24, r20
 3fe:	ba 07       	cpc	r27, r26
 400:	20 f0       	brcs	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 402:	62 1b       	sub	r22, r18
 404:	73 0b       	sbc	r23, r19
 406:	84 0b       	sbc	r24, r20
 408:	ba 0b       	sbc	r27, r26
 40a:	ee 1f       	adc	r30, r30
 40c:	88 f7       	brcc	.-30     	; 0x3f0 <__divsf3_pse+0x94>
 40e:	e0 95       	com	r30
 410:	08 95       	ret

00000412 <__floatunsisf>:
 412:	e8 94       	clt
 414:	09 c0       	rjmp	.+18     	; 0x428 <__floatsisf+0x12>

00000416 <__floatsisf>:
 416:	97 fb       	bst	r25, 7
 418:	3e f4       	brtc	.+14     	; 0x428 <__floatsisf+0x12>
 41a:	90 95       	com	r25
 41c:	80 95       	com	r24
 41e:	70 95       	com	r23
 420:	61 95       	neg	r22
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	8f 4f       	sbci	r24, 0xFF	; 255
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	99 23       	and	r25, r25
 42a:	a9 f0       	breq	.+42     	; 0x456 <__floatsisf+0x40>
 42c:	f9 2f       	mov	r31, r25
 42e:	96 e9       	ldi	r25, 0x96	; 150
 430:	bb 27       	eor	r27, r27
 432:	93 95       	inc	r25
 434:	f6 95       	lsr	r31
 436:	87 95       	ror	r24
 438:	77 95       	ror	r23
 43a:	67 95       	ror	r22
 43c:	b7 95       	ror	r27
 43e:	f1 11       	cpse	r31, r1
 440:	f8 cf       	rjmp	.-16     	; 0x432 <__floatsisf+0x1c>
 442:	fa f4       	brpl	.+62     	; 0x482 <__floatsisf+0x6c>
 444:	bb 0f       	add	r27, r27
 446:	11 f4       	brne	.+4      	; 0x44c <__floatsisf+0x36>
 448:	60 ff       	sbrs	r22, 0
 44a:	1b c0       	rjmp	.+54     	; 0x482 <__floatsisf+0x6c>
 44c:	6f 5f       	subi	r22, 0xFF	; 255
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	8f 4f       	sbci	r24, 0xFF	; 255
 452:	9f 4f       	sbci	r25, 0xFF	; 255
 454:	16 c0       	rjmp	.+44     	; 0x482 <__floatsisf+0x6c>
 456:	88 23       	and	r24, r24
 458:	11 f0       	breq	.+4      	; 0x45e <__floatsisf+0x48>
 45a:	96 e9       	ldi	r25, 0x96	; 150
 45c:	11 c0       	rjmp	.+34     	; 0x480 <__floatsisf+0x6a>
 45e:	77 23       	and	r23, r23
 460:	21 f0       	breq	.+8      	; 0x46a <__floatsisf+0x54>
 462:	9e e8       	ldi	r25, 0x8E	; 142
 464:	87 2f       	mov	r24, r23
 466:	76 2f       	mov	r23, r22
 468:	05 c0       	rjmp	.+10     	; 0x474 <__floatsisf+0x5e>
 46a:	66 23       	and	r22, r22
 46c:	71 f0       	breq	.+28     	; 0x48a <__floatsisf+0x74>
 46e:	96 e8       	ldi	r25, 0x86	; 134
 470:	86 2f       	mov	r24, r22
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	2a f0       	brmi	.+10     	; 0x482 <__floatsisf+0x6c>
 478:	9a 95       	dec	r25
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	88 1f       	adc	r24, r24
 480:	da f7       	brpl	.-10     	; 0x478 <__floatsisf+0x62>
 482:	88 0f       	add	r24, r24
 484:	96 95       	lsr	r25
 486:	87 95       	ror	r24
 488:	97 f9       	bld	r25, 7
 48a:	08 95       	ret

0000048c <__fp_cmp>:
 48c:	99 0f       	add	r25, r25
 48e:	00 08       	sbc	r0, r0
 490:	55 0f       	add	r21, r21
 492:	aa 0b       	sbc	r26, r26
 494:	e0 e8       	ldi	r30, 0x80	; 128
 496:	fe ef       	ldi	r31, 0xFE	; 254
 498:	16 16       	cp	r1, r22
 49a:	17 06       	cpc	r1, r23
 49c:	e8 07       	cpc	r30, r24
 49e:	f9 07       	cpc	r31, r25
 4a0:	c0 f0       	brcs	.+48     	; 0x4d2 <__fp_cmp+0x46>
 4a2:	12 16       	cp	r1, r18
 4a4:	13 06       	cpc	r1, r19
 4a6:	e4 07       	cpc	r30, r20
 4a8:	f5 07       	cpc	r31, r21
 4aa:	98 f0       	brcs	.+38     	; 0x4d2 <__fp_cmp+0x46>
 4ac:	62 1b       	sub	r22, r18
 4ae:	73 0b       	sbc	r23, r19
 4b0:	84 0b       	sbc	r24, r20
 4b2:	95 0b       	sbc	r25, r21
 4b4:	39 f4       	brne	.+14     	; 0x4c4 <__fp_cmp+0x38>
 4b6:	0a 26       	eor	r0, r26
 4b8:	61 f0       	breq	.+24     	; 0x4d2 <__fp_cmp+0x46>
 4ba:	23 2b       	or	r18, r19
 4bc:	24 2b       	or	r18, r20
 4be:	25 2b       	or	r18, r21
 4c0:	21 f4       	brne	.+8      	; 0x4ca <__fp_cmp+0x3e>
 4c2:	08 95       	ret
 4c4:	0a 26       	eor	r0, r26
 4c6:	09 f4       	brne	.+2      	; 0x4ca <__fp_cmp+0x3e>
 4c8:	a1 40       	sbci	r26, 0x01	; 1
 4ca:	a6 95       	lsr	r26
 4cc:	8f ef       	ldi	r24, 0xFF	; 255
 4ce:	81 1d       	adc	r24, r1
 4d0:	81 1d       	adc	r24, r1
 4d2:	08 95       	ret

000004d4 <__fp_inf>:
 4d4:	97 f9       	bld	r25, 7
 4d6:	9f 67       	ori	r25, 0x7F	; 127
 4d8:	80 e8       	ldi	r24, 0x80	; 128
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	08 95       	ret

000004e0 <__fp_nan>:
 4e0:	9f ef       	ldi	r25, 0xFF	; 255
 4e2:	80 ec       	ldi	r24, 0xC0	; 192
 4e4:	08 95       	ret

000004e6 <__fp_pscA>:
 4e6:	00 24       	eor	r0, r0
 4e8:	0a 94       	dec	r0
 4ea:	16 16       	cp	r1, r22
 4ec:	17 06       	cpc	r1, r23
 4ee:	18 06       	cpc	r1, r24
 4f0:	09 06       	cpc	r0, r25
 4f2:	08 95       	ret

000004f4 <__fp_pscB>:
 4f4:	00 24       	eor	r0, r0
 4f6:	0a 94       	dec	r0
 4f8:	12 16       	cp	r1, r18
 4fa:	13 06       	cpc	r1, r19
 4fc:	14 06       	cpc	r1, r20
 4fe:	05 06       	cpc	r0, r21
 500:	08 95       	ret

00000502 <__fp_round>:
 502:	09 2e       	mov	r0, r25
 504:	03 94       	inc	r0
 506:	00 0c       	add	r0, r0
 508:	11 f4       	brne	.+4      	; 0x50e <__fp_round+0xc>
 50a:	88 23       	and	r24, r24
 50c:	52 f0       	brmi	.+20     	; 0x522 <__fp_round+0x20>
 50e:	bb 0f       	add	r27, r27
 510:	40 f4       	brcc	.+16     	; 0x522 <__fp_round+0x20>
 512:	bf 2b       	or	r27, r31
 514:	11 f4       	brne	.+4      	; 0x51a <__fp_round+0x18>
 516:	60 ff       	sbrs	r22, 0
 518:	04 c0       	rjmp	.+8      	; 0x522 <__fp_round+0x20>
 51a:	6f 5f       	subi	r22, 0xFF	; 255
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	8f 4f       	sbci	r24, 0xFF	; 255
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	08 95       	ret

00000524 <__fp_split3>:
 524:	57 fd       	sbrc	r21, 7
 526:	90 58       	subi	r25, 0x80	; 128
 528:	44 0f       	add	r20, r20
 52a:	55 1f       	adc	r21, r21
 52c:	59 f0       	breq	.+22     	; 0x544 <__fp_splitA+0x10>
 52e:	5f 3f       	cpi	r21, 0xFF	; 255
 530:	71 f0       	breq	.+28     	; 0x54e <__fp_splitA+0x1a>
 532:	47 95       	ror	r20

00000534 <__fp_splitA>:
 534:	88 0f       	add	r24, r24
 536:	97 fb       	bst	r25, 7
 538:	99 1f       	adc	r25, r25
 53a:	61 f0       	breq	.+24     	; 0x554 <__fp_splitA+0x20>
 53c:	9f 3f       	cpi	r25, 0xFF	; 255
 53e:	79 f0       	breq	.+30     	; 0x55e <__fp_splitA+0x2a>
 540:	87 95       	ror	r24
 542:	08 95       	ret
 544:	12 16       	cp	r1, r18
 546:	13 06       	cpc	r1, r19
 548:	14 06       	cpc	r1, r20
 54a:	55 1f       	adc	r21, r21
 54c:	f2 cf       	rjmp	.-28     	; 0x532 <__fp_split3+0xe>
 54e:	46 95       	lsr	r20
 550:	f1 df       	rcall	.-30     	; 0x534 <__fp_splitA>
 552:	08 c0       	rjmp	.+16     	; 0x564 <__fp_splitA+0x30>
 554:	16 16       	cp	r1, r22
 556:	17 06       	cpc	r1, r23
 558:	18 06       	cpc	r1, r24
 55a:	99 1f       	adc	r25, r25
 55c:	f1 cf       	rjmp	.-30     	; 0x540 <__fp_splitA+0xc>
 55e:	86 95       	lsr	r24
 560:	71 05       	cpc	r23, r1
 562:	61 05       	cpc	r22, r1
 564:	08 94       	sec
 566:	08 95       	ret

00000568 <__fp_zero>:
 568:	e8 94       	clt

0000056a <__fp_szero>:
 56a:	bb 27       	eor	r27, r27
 56c:	66 27       	eor	r22, r22
 56e:	77 27       	eor	r23, r23
 570:	cb 01       	movw	r24, r22
 572:	97 f9       	bld	r25, 7
 574:	08 95       	ret

00000576 <__mulsf3>:
 576:	0e 94 ce 02 	call	0x59c	; 0x59c <__mulsf3x>
 57a:	0c 94 81 02 	jmp	0x502	; 0x502 <__fp_round>
 57e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fp_pscA>
 582:	38 f0       	brcs	.+14     	; 0x592 <__mulsf3+0x1c>
 584:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fp_pscB>
 588:	20 f0       	brcs	.+8      	; 0x592 <__mulsf3+0x1c>
 58a:	95 23       	and	r25, r21
 58c:	11 f0       	breq	.+4      	; 0x592 <__mulsf3+0x1c>
 58e:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_inf>
 592:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_nan>
 596:	11 24       	eor	r1, r1
 598:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_szero>

0000059c <__mulsf3x>:
 59c:	0e 94 92 02 	call	0x524	; 0x524 <__fp_split3>
 5a0:	70 f3       	brcs	.-36     	; 0x57e <__mulsf3+0x8>

000005a2 <__mulsf3_pse>:
 5a2:	95 9f       	mul	r25, r21
 5a4:	c1 f3       	breq	.-16     	; 0x596 <__mulsf3+0x20>
 5a6:	95 0f       	add	r25, r21
 5a8:	50 e0       	ldi	r21, 0x00	; 0
 5aa:	55 1f       	adc	r21, r21
 5ac:	62 9f       	mul	r22, r18
 5ae:	f0 01       	movw	r30, r0
 5b0:	72 9f       	mul	r23, r18
 5b2:	bb 27       	eor	r27, r27
 5b4:	f0 0d       	add	r31, r0
 5b6:	b1 1d       	adc	r27, r1
 5b8:	63 9f       	mul	r22, r19
 5ba:	aa 27       	eor	r26, r26
 5bc:	f0 0d       	add	r31, r0
 5be:	b1 1d       	adc	r27, r1
 5c0:	aa 1f       	adc	r26, r26
 5c2:	64 9f       	mul	r22, r20
 5c4:	66 27       	eor	r22, r22
 5c6:	b0 0d       	add	r27, r0
 5c8:	a1 1d       	adc	r26, r1
 5ca:	66 1f       	adc	r22, r22
 5cc:	82 9f       	mul	r24, r18
 5ce:	22 27       	eor	r18, r18
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	62 1f       	adc	r22, r18
 5d6:	73 9f       	mul	r23, r19
 5d8:	b0 0d       	add	r27, r0
 5da:	a1 1d       	adc	r26, r1
 5dc:	62 1f       	adc	r22, r18
 5de:	83 9f       	mul	r24, r19
 5e0:	a0 0d       	add	r26, r0
 5e2:	61 1d       	adc	r22, r1
 5e4:	22 1f       	adc	r18, r18
 5e6:	74 9f       	mul	r23, r20
 5e8:	33 27       	eor	r19, r19
 5ea:	a0 0d       	add	r26, r0
 5ec:	61 1d       	adc	r22, r1
 5ee:	23 1f       	adc	r18, r19
 5f0:	84 9f       	mul	r24, r20
 5f2:	60 0d       	add	r22, r0
 5f4:	21 1d       	adc	r18, r1
 5f6:	82 2f       	mov	r24, r18
 5f8:	76 2f       	mov	r23, r22
 5fa:	6a 2f       	mov	r22, r26
 5fc:	11 24       	eor	r1, r1
 5fe:	9f 57       	subi	r25, 0x7F	; 127
 600:	50 40       	sbci	r21, 0x00	; 0
 602:	9a f0       	brmi	.+38     	; 0x62a <__mulsf3_pse+0x88>
 604:	f1 f0       	breq	.+60     	; 0x642 <__mulsf3_pse+0xa0>
 606:	88 23       	and	r24, r24
 608:	4a f0       	brmi	.+18     	; 0x61c <__mulsf3_pse+0x7a>
 60a:	ee 0f       	add	r30, r30
 60c:	ff 1f       	adc	r31, r31
 60e:	bb 1f       	adc	r27, r27
 610:	66 1f       	adc	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	88 1f       	adc	r24, r24
 616:	91 50       	subi	r25, 0x01	; 1
 618:	50 40       	sbci	r21, 0x00	; 0
 61a:	a9 f7       	brne	.-22     	; 0x606 <__mulsf3_pse+0x64>
 61c:	9e 3f       	cpi	r25, 0xFE	; 254
 61e:	51 05       	cpc	r21, r1
 620:	80 f0       	brcs	.+32     	; 0x642 <__mulsf3_pse+0xa0>
 622:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_inf>
 626:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_szero>
 62a:	5f 3f       	cpi	r21, 0xFF	; 255
 62c:	e4 f3       	brlt	.-8      	; 0x626 <__mulsf3_pse+0x84>
 62e:	98 3e       	cpi	r25, 0xE8	; 232
 630:	d4 f3       	brlt	.-12     	; 0x626 <__mulsf3_pse+0x84>
 632:	86 95       	lsr	r24
 634:	77 95       	ror	r23
 636:	67 95       	ror	r22
 638:	b7 95       	ror	r27
 63a:	f7 95       	ror	r31
 63c:	e7 95       	ror	r30
 63e:	9f 5f       	subi	r25, 0xFF	; 255
 640:	c1 f7       	brne	.-16     	; 0x632 <__mulsf3_pse+0x90>
 642:	fe 2b       	or	r31, r30
 644:	88 0f       	add	r24, r24
 646:	91 1d       	adc	r25, r1
 648:	96 95       	lsr	r25
 64a:	87 95       	ror	r24
 64c:	97 f9       	bld	r25, 7
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
